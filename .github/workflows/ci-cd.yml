name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: numcheck_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/numcheck_test

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/numcheck_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          API_KEY_PEPPER: test_api_pepper

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [gateway, worker-wa, worker-tg, aggregator, web-user, web-admin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'web-user' && 'apps/web-user/Dockerfile' || matrix.service == 'web-admin' && 'apps/web-admin/Dockerfile' || format('services/{0}/Dockerfile', matrix.service) }}
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/numcheck-${{ matrix.service }}:latest
            ${{ env.ECR_REGISTRY }}/numcheck-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: infrastructure/aws

      - name: Terraform Plan
        run: terraform plan -var-file="staging.tfvars"
        working-directory: infrastructure/aws
        env:
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_api_key_pepper: ${{ secrets.API_KEY_PEPPER }}
          TF_VAR_numcheck_api_key: ${{ secrets.NUMCHECK_API_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="staging.tfvars"
        working-directory: infrastructure/aws
        env:
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_api_key_pepper: ${{ secrets.API_KEY_PEPPER }}
          TF_VAR_numcheck_api_key: ${{ secrets.NUMCHECK_API_KEY }}

      - name: Update ECS Services
        run: |
          aws ecs update-service --cluster numcheck-staging --service numcheck-staging-gateway --force-new-deployment
          aws ecs update-service --cluster numcheck-staging --service numcheck-staging-worker-wa --force-new-deployment
          aws ecs update-service --cluster numcheck-staging --service numcheck-staging-worker-tg --force-new-deployment
          aws ecs update-service --cluster numcheck-staging --service numcheck-staging-aggregator --force-new-deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: infrastructure/aws

      - name: Terraform Plan
        run: terraform plan -var-file="production.tfvars"
        working-directory: infrastructure/aws
        env:
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_api_key_pepper: ${{ secrets.API_KEY_PEPPER }}
          TF_VAR_numcheck_api_key: ${{ secrets.NUMCHECK_API_KEY }}

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 1
          issue-title: "Deploy to Production"
          issue-body: "Please review and approve the production deployment"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="production.tfvars"
        working-directory: infrastructure/aws
        env:
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_api_key_pepper: ${{ secrets.API_KEY_PEPPER }}
          TF_VAR_numcheck_api_key: ${{ secrets.NUMCHECK_API_KEY }}

      - name: Update ECS Services
        run: |
          aws ecs update-service --cluster numcheck-production --service numcheck-production-gateway --force-new-deployment
          aws ecs update-service --cluster numcheck-production --service numcheck-production-worker-wa --force-new-deployment
          aws ecs update-service --cluster numcheck-production --service numcheck-production-worker-tg --force-new-deployment
          aws ecs update-service --cluster numcheck-production --service numcheck-production-aggregator --force-new-deployment

      - name: Run Database Migrations
        run: |
          # Get the latest task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition numcheck-production-gateway --query 'taskDefinition')
          
          # Run migration task
          aws ecs run-task \
            --cluster numcheck-production \
            --task-definition numcheck-production-gateway \
            --overrides '{"containerOverrides":[{"name":"gateway","command":["pnpm","db:migrate"]}]}' \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=ENABLED}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
